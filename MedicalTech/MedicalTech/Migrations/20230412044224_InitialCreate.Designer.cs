// <auto-generated />
using System;
using MedicalTech.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalTech.Migrations
{
    [DbContext(typeof(IMedicalTechContext))]
    [Migration("20230412044224_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MedicalTech.Models.Pesssoa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cpf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("NomeCompleto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pessoa");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("MedicalTech.Models.Enfermeiro", b =>
                {
                    b.HasBaseType("MedicalTech.Models.Pesssoa");

                    b.Property<string>("Cofen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstEnsFormacao")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Enfermeiro");
                });

            modelBuilder.Entity("MedicalTech.Models.Medico", b =>
                {
                    b.HasBaseType("MedicalTech.Models.Pesssoa");

                    b.Property<string>("Crm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EspClinica")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstEnsinoForm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("StatusSistema")
                        .HasColumnType("bit");

                    b.Property<int>("TotalAtendimentos")
                        .HasColumnType("int");

                    b.ToTable("Medico");
                });

            modelBuilder.Entity("MedicalTech.Models.Paciente", b =>
                {
                    b.HasBaseType("MedicalTech.Models.Pesssoa");

                    b.Property<int>("ContadorTotalAtendimentos")
                        .HasColumnType("int");

                    b.Property<string>("ContatoDeEmergencia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Convenio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ListaCuidadosEspecifios")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ListaDeAlergias")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusdeAtendimento")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Paciente");
                });

            modelBuilder.Entity("MedicalTech.Models.Enfermeiro", b =>
                {
                    b.HasOne("MedicalTech.Models.Pesssoa", null)
                        .WithOne()
                        .HasForeignKey("MedicalTech.Models.Enfermeiro", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicalTech.Models.Medico", b =>
                {
                    b.HasOne("MedicalTech.Models.Pesssoa", null)
                        .WithOne()
                        .HasForeignKey("MedicalTech.Models.Medico", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicalTech.Models.Paciente", b =>
                {
                    b.HasOne("MedicalTech.Models.Pesssoa", null)
                        .WithOne()
                        .HasForeignKey("MedicalTech.Models.Paciente", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
